/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Gravicor;

import java.util.LinkedList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Daniel
 */
public class GestionGastosGenerales extends javax.swing.JFrame {

    
    private Integer anoInicial = 2018;
    private Integer ano = 2018;
    private Integer mes = 1;
    private String[] listaMeses = {"Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octubre","Noviembre","Diciembre"};
    /** Creates new form GestionGastosGenerales */
    public GestionGastosGenerales() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.setTitle("Gestión de Gastos Generales");
        
        try{
            String query = "SELECT convert(varchar, getdate(), 105) as FECHA";
            String[] columnas = {"FECHA"};
            LinkedList<LinkedList<String>> fecha = Globales.baseDatos.select(query, columnas);
            if(fecha == null){
                throw new NoConectionDataBaseException("Error al conectarse con la base de datos: " + Globales.baseDatos.getUltimoError());
            }
            if(fecha.size() <1){
                throw new NoConectionDataBaseException("Error al conectarse con la base de datos: No se encontraron datos de la fecha actual");
            }
            String[] fechaArray = fecha.get(0).get(0).split("-");
            if(fechaArray.length != 3){
                throw new NoTypeRequiredException("No se puede procesar la fecha obtenida de la base de datos");
            }
            
            ano = Integer.parseInt(fechaArray[2]);
            
            mes = Integer.parseInt(fechaArray[1]);
            
            int contadorAnos = ano - anoInicial;
            String[] listaAnos = new String[contadorAnos + 1];
            listaAnos[0] = anoInicial.toString();
            
            for(int i = 0; i<contadorAnos;i++){
                Integer tempInt = anoInicial+(i+1);
                listaAnos[i+1] = tempInt.toString();
            }
            DefaultComboBoxModel anoModel = new DefaultComboBoxModel(listaAnos);
            anoCB.setModel(anoModel);
            
            DefaultComboBoxModel mesModel = new DefaultComboBoxModel(generarListaMeses(mes));
            mesCB.setModel(mesModel);
            
            anoCB.setSelectedIndex(anoCB.getItemCount()-1);
            mesCB.setSelectedIndex(mesCB.getItemCount()-1);
            
            //termina seccion de ajuste de fecha
            actualizarTabla();
            
            
            
        }
        catch(NoConectionDataBaseException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error de conexión con la base de datos", JOptionPane.ERROR_MESSAGE);
            
        }
        catch(NoTypeRequiredException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error al guardar el registro", JOptionPane.WARNING_MESSAGE);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        mesCB = new javax.swing.JComboBox<>();
        anoCB = new javax.swing.JComboBox<>();
        totalAcumuladoL = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(249, 255, 255));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gravicor/AssetsNuevos/regresar.png"))); // NOI18N
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Gravicor/AssetsNuevos/regresar2.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID gasto", "Folio de pago", "Fecha de folio", "Número de factura", "Fecha de factura", "Total", "Equipo", "Proovedor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tabla);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gravicor/AssetsNuevos/anadirGasto.png"))); // NOI18N
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Gravicor/AssetsNuevos/anadirGasto2.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gravicor/AssetsNuevos/editarGasto.png"))); // NOI18N
        jButton3.setContentAreaFilled(false);
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Gravicor/AssetsNuevos/editarGasto2.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gravicor/AssetsNuevos/eliminarGasto2.png"))); // NOI18N
        jButton4.setContentAreaFilled(false);
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton4.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Gravicor/AssetsNuevos/eliminarGasto.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        mesCB.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        mesCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mesCBActionPerformed(evt);
            }
        });

        anoCB.setFont(new java.awt.Font("Calibri", 0, 20)); // NOI18N
        anoCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anoCBActionPerformed(evt);
            }
        });

        totalAcumuladoL.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        totalAcumuladoL.setText("Total acumulado: $0");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gravicor/AssetsNuevos/encabezadoLogoGravicor.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 48)); // NOI18N
        jLabel2.setText("Gestión de gastos generales");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(112, 112, 112)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(mesCB, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(anoCB, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(15, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(208, 208, 208))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(totalAcumuladoL, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(273, 273, 273))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mesCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(anoCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(totalAcumuladoL)
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton2))
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void actualizarTabla() throws NoConectionDataBaseException, NoTypeRequiredException{
        limpiarTabla();
        String query = "SELECT G.GASTOGENERALID, G.IDFOLIOPAGO, G.FECHAFOLIOPAGO, G.FOLIOFACTURA,G.FECHAFACTURA,G.TOTAL, G.EQUIPO, G.PROVEEDOR\n" +
                    "FROM GASTOGENERAL AS G\n" +
                    "WHERE G.ESACTIVO = 1 AND month(G.FECHAFACTURA) = month('"+generarFechaAPedir()+"') and year(G.FECHAFACTURA) = year('"+generarFechaAPedir()+"')";
        String[] columnasGastos = {"GASTOGENERALID", "IDFOLIOPAGO", "FECHAFOLIOPAGO", "FOLIOFACTURA","FECHAFACTURA","TOTAL", "EQUIPO", "PROVEEDOR"};
        boolean  bandera = Globales.baseDatos.insertarEnTabla( query,columnasGastos, tabla);

        if(bandera == false){
            throw new NoConectionDataBaseException("Error al conectarse a la base de datos: " + Globales.baseDatos.getUltimoError());

        }
        
        query = "SELECT SUM(G.TOTAL) AS TOTAL\n" +
                "FROM GASTOGENERAL AS G\n" +
                "WHERE G.ESACTIVO = 1 AND month(G.FECHAFACTURA) = month('"+generarFechaAPedir()+"') and year(G.FECHAFACTURA) = year('"+generarFechaAPedir()+"')";
        String[] columnasTotal = {"TOTAL"};
        LinkedList<LinkedList<String>> total = Globales.baseDatos.select(query, columnasTotal);
        if(total == null){
            throw new NoConectionDataBaseException("Error al conectarse a la base de datos: " + Globales.baseDatos.getUltimoError());
        }
        if(total.size() < 1){
            throw new NoTypeRequiredException("Error inesperado, no se pudo obtener la suma total requerida");
        }
        Float resultadoTotal = (float) 0;
        if(total.get(0).get(0) == null){
            
        }
        else{
            try{
            resultadoTotal = Float.parseFloat(total.get(0).get(0));
            }
            catch(Exception e){
                throw new NoTypeRequiredException("Error inesperado, no fue posible hacer la conversión a un numero flotante");
            }
        }
        
        
        totalAcumuladoL.setText("Total acumulado: $" + resultadoTotal);
    }
    private String[] generarListaMeses(int mes){
        String[] listaMesesF = new String[mes];
        for(int i = 0; i< mes; i++){
            listaMesesF[i] = listaMeses[i];
        }
        return listaMesesF;
    }
    
    private void limpiarTabla(){
        DefaultTableModel dtm = (DefaultTableModel)tabla.getModel(); 
        int numRows = dtm.getRowCount();
        //dtm.removeRow(0);
        dtm.setRowCount(0);
        String[] columnas = {"","","","","","","",""};
        dtm.addRow(columnas);
    }
    
    private String generarFechaAPedir(){
        String resultado = "";
        Integer mesAPedir = mesCB.getSelectedIndex() + 1;
        resultado += "1-" + mesAPedir + "-" + anoCB.getSelectedItem();
        return resultado;
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        boolean bandera = Globales.baseDatos.conectarBD(Globales.baseDatos.generarURL());
        if(bandera != false){
            MenuPrincipal menu = new MenuPrincipal();
            menu.setVisible(true);
            this.dispose();
        }
        else{
            JOptionPane.showMessageDialog(this, "Error al conectarse a la base de datos: " + Globales.baseDatos.getUltimoError(), "Error de conexión con la base de datos", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void anoCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anoCBActionPerformed
        // TODO add your handling code here:
        String seleccionado = (String)anoCB.getSelectedItem();
        Integer anoSeleccionado = 0;
        try{
            anoSeleccionado = Integer.parseInt(seleccionado);
            
            if(anoSeleccionado.equals(ano)){
                
                DefaultComboBoxModel mesModel = new DefaultComboBoxModel(generarListaMeses(mes));
                mesCB.setModel(mesModel);
            }
            else{
                DefaultComboBoxModel mesModel = new DefaultComboBoxModel(generarListaMeses(12));
                mesCB.setModel(mesModel);
            }
            limpiarTabla();
            actualizarTabla();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error al procesar la fecha seleccionada", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_anoCBActionPerformed

    public void actualizarPantallaConFecha(int anoSelectedIndex, int mesSelectedIndex){
        try{
            anoCB.setSelectedIndex(anoSelectedIndex);
            anoCBActionPerformed(null);
            mesCB.setSelectedIndex(mesSelectedIndex);
            limpiarTabla();
            actualizarTabla();
            
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error al Actualizar la fecha inicial de la pantalla", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    private void mesCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mesCBActionPerformed
        // TODO add your handling code here:
        try{
            limpiarTabla();
            actualizarTabla();
        }
        catch(NoConectionDataBaseException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error de conexión con la base de datos", JOptionPane.ERROR_MESSAGE);
            
        }
        catch(NoTypeRequiredException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error al guardar el registro", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_mesCBActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        boolean bandera = Globales.baseDatos.conectarBD(Globales.baseDatos.generarURL());
        if(bandera != false){
            AnadirGastoGeneral gastoGeneral= new AnadirGastoGeneral();
            Integer anoSiguientePantalla = 0;
            Integer mesSiguientePantalla = 0;
            try{
                anoSiguientePantalla = Integer.parseInt((String)anoCB.getSelectedItem());
                mesSiguientePantalla = mesCB.getSelectedIndex() + 1;
                
                gastoGeneral.setAnoYMes(anoSiguientePantalla, mesSiguientePantalla);
                gastoGeneral.setAnoSelectedIndexPrev(anoCB.getSelectedIndex());
                gastoGeneral.setVisible(true);
                this.dispose();
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error al conectarse con la siguiente pantalla: " + e, "Error inesperado", JOptionPane.ERROR_MESSAGE);
            }
            
        }
        else{
            JOptionPane.showMessageDialog(this, "Error al conectarse a la base de datos: " + Globales.baseDatos.getUltimoError(), "Error de conexión con la base de datos", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        boolean bandera = Globales.baseDatos.conectarBD(Globales.baseDatos.generarURL());
        if(bandera != false){
            EditarGastoGeneral gastoGeneral= new EditarGastoGeneral();
            Integer anoSiguientePantalla = 0;
            Integer mesSiguientePantalla = 0;
            try{
                if(tabla.getSelectedRow() < 0){
                    throw new Exception("No has seleccionado ningún gasto en la tabla para seleccionar");
                }
                Integer plantaID = Integer.parseInt((String) tabla.getModel().getValueAt(tabla.getSelectedRow(), 0));
                anoSiguientePantalla = Integer.parseInt((String)anoCB.getSelectedItem());
                mesSiguientePantalla = mesCB.getSelectedIndex() + 1;
                
                gastoGeneral.setAnoYMesYgasto(anoSiguientePantalla, mesSiguientePantalla, plantaID);
                gastoGeneral.setAnoSelectedIndexPrev(anoCB.getSelectedIndex());
                gastoGeneral.setVisible(true);
                this.dispose();
            }
            catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error al conectarse con la siguiente pantalla: " + e, "Error inesperado", JOptionPane.ERROR_MESSAGE);
            }
            
        }
        else{
            JOptionPane.showMessageDialog(this, "Error al conectarse a la base de datos: " + Globales.baseDatos.getUltimoError(), "Error de conexión con la base de datos", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if(tabla.getSelectedRow() < 0){
            JOptionPane.showMessageDialog(this, "Por favor selecciona de la tabla el viaje que desea eliminar", "Error de selección", JOptionPane.ERROR_MESSAGE);
        }
        else{
            String idGasto = (String)tabla.getModel().getValueAt(tabla.getSelectedRow(), 0);
            Object[] options = {"SI",
                    "NO"};
            int n = JOptionPane.showOptionDialog(this, //si = 0, no = 1
                "¿Estás seguro que deseas eliminar este registro?",
                "¿Eliminar registro?",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,     //do not use a custom Icon
                options,  //the titles of buttons
                options[0]); //default button title
            if(n == 0){
                String query = "UPDATE GASTOGENERAL SET ESACTIVO = 0 WHERE GASTOGENERALID = " + idGasto;
                try{
                    boolean bandera = Globales.baseDatos.update(query);
                    if(bandera == false){
                        throw new NoConectionDataBaseException("Error al conectar a la base de datos: " + Globales.baseDatos.getUltimoError());
                    }
                    
                    actualizarTabla();
                }
                catch(NoConectionDataBaseException e){
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Error de conexión con la base de datos", JOptionPane.ERROR_MESSAGE);
                }
                catch(NoTypeRequiredException e){
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Error al guardar el registro", JOptionPane.WARNING_MESSAGE);
                }
            }
            
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionGastosGenerales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionGastosGenerales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionGastosGenerales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionGastosGenerales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionGastosGenerales().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> anoCB;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> mesCB;
    private javax.swing.JTable tabla;
    private javax.swing.JLabel totalAcumuladoL;
    // End of variables declaration//GEN-END:variables

}
