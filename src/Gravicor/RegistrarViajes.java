/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Gravicor;


import java.util.LinkedList;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import org.apache.commons.codec.digest.DigestUtils;

/**
 *
 * @author Daniel
 */
public class RegistrarViajes extends javax.swing.JFrame {

    /**
     * Creates new form RegistrarViajes
     */
    public RegistrarViajes() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.setTitle("Registrar viajes");
        registroTF.requestFocusInWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        registroTF = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gravicor/Assets/source.gif"))); // NOI18N

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gravicor/Assets/back-icon.png"))); // NOI18N
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 48)); // NOI18N
        jLabel1.setText("Acerca el código al lector");

        registroTF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        registroTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registroTFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jLabel2)
                .addContainerGap(150, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(247, 247, 247))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(registroTF, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(376, 376, 376))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(registroTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void registroTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registroTFActionPerformed
        
        
        try{
            
            try{
                int revisar = Integer.parseInt(registroTF.getText());
            }
            catch(Exception e){
                throw new NoTypeRequiredException("El código ingresado no es valido, por favor introducelo de nuevo");
            }
            
            if(registroTF.getText().length() != 8){
                throw new NoTypeRequiredException("El código ingresado no es valido, por favor introducelo de nuevo");
            }
            String codigoDeBarras = registroTF.getText().substring(1, 7);
            
            
            Integer  codigoDeBarrasInt = new Integer(codigoDeBarras);
            
            String query = "select CAMION.IDCAMION from CAMION where CAMION.IDCAMION = " + codigoDeBarrasInt;
            String[] columnas = {"IDCAMION"};
            LinkedList<LinkedList<String>> usuarioValido = Globales.bdTemp.select(query, columnas);
            
            if(usuarioValido.get(0).size() == 0 || usuarioValido == null){
                throw new NoTypeRequiredException("El código ingresado no es valido, por favor introducelo de nuevo");
            }
            String queryCamionActivo= "SELECT ACTIVO.DESCRIPCION\n" +
                                        "FROM CAMION, ACTIVO\n" +
                                        "WHERE CAMION.ACTIVO = ACTIVO.IDACTIVO AND CAMION.IDCAMION = "+codigoDeBarrasInt+"";
            
            String[] columnasCamionActivo = {"DESCRIPCION"};
            
            LinkedList<LinkedList<String>> camionActivo = Globales.bdTemp.select(queryCamionActivo, columnasCamionActivo);
            
            if(camionActivo == null || camionActivo.get(0).size() == 0){
                throw new NoConectionDataBaseException("Error al conectar a la base de datos: " + Globales.bdTemp.getUltimoError());
            }
            
            if(!camionActivo.get(0).get(0).equals(new String("ACTIVO"))){
                throw new NoTypeRequiredException("Este camión está registrado como 'Inactivo', por favor contacta al administrador");
            }
            ConfiguracionPrograma configuraciones = new ConfiguracionPrograma();
            Integer tiempoDeEsperaMinutos = configuraciones.getValueWithHash("TiempoEsperaSiguienteViaje");
            query = "Select CONVERT(VARCHAR, VIAJE.HORA, 108) as Hora from viaje where VIAJE.IDCAMION = " + codigoDeBarrasInt + " and viaje.FECHA = convert(varchar, getDate(), 106)"; 
            columnas[0] = "Hora";
             
            LinkedList<LinkedList<String>> viajesDeHoy = Globales.bdTemp.select(query, columnas);
            //System.out.println("viajes de hoy: " + viajesDeHoy);
            if(viajesDeHoy == null){
                
                throw new NoConectionDataBaseException("Error al conectar a la base de datos: " + Globales.bdTemp.getUltimoError());
            }
            //revisar el numero de viajes que tiene y si cumple seguir:
            if(viajesDeHoy.get(0).size() >= 1){
                //funcion para calcular si ya se puede hacer el siguiente registro
                query = "SELECT CONVERT(VARCHAR, GETDATE(), 108) as HoraActual";
                columnas[0] = "HoraActual";
                LinkedList<LinkedList<String>> horaActual = Globales.bdTemp.select(query, columnas);
                if(horaActual == null){
                    throw new NoConectionDataBaseException("Error al conectar a la base de datos: " + Globales.bdTemp.getUltimoError());
                }
                String[] componentesHoraActual = horaActual.get(0).get(0).split(":");
                String[] componentesUltimoRegistro = viajesDeHoy.get(0).get(viajesDeHoy.get(0).size()-1).split(":");
                
                int tiempoActualHora = new Integer(componentesHoraActual[0]);
                int tiempoActualMinutos = new Integer(componentesHoraActual[1]);
                
                int tiempoRegistroHora = new Integer(componentesUltimoRegistro[0]);
                int tiempoRegistroMinutos = new Integer(componentesUltimoRegistro[1]);
                
                int diferencia = 0;
                
                if(tiempoActualMinutos >= tiempoRegistroMinutos && tiempoActualHora>tiempoRegistroHora){
                    diferencia = (tiempoActualMinutos - tiempoRegistroMinutos) + ((tiempoActualHora-tiempoRegistroHora)*60);
                    //System.out.println("entro al if: 1");
                }
                else if(tiempoActualHora>tiempoRegistroHora){
                    //System.out.println("entro al if: 2");
                    diferencia = (60 - (tiempoRegistroMinutos-tiempoActualMinutos)) + ((tiempoActualHora-tiempoRegistroHora-1)*60);
                }
                else{
                    //System.out.println("entro al if: 3");
                    diferencia = tiempoActualMinutos - tiempoRegistroMinutos;
                }
                
                
                /*
                System.out.println("camion: " + codigoDeBarrasInt);
                System.out.println("Hora actual: "  + horaActual.get(0).get(0));
                System.out.println("Ultimo registro: "  +viajesDeHoy.get(0).get(viajesDeHoy.get(0).size()-1));
                System.out.println("diferencia: " + (tiempoDeEsperaMinutos-diferencia));
                
                System.out.println("----------------------------------");*/
                //System.out.println("Ultimo registro: "  +viajesDeHoy.get(0).get(viajesDeHoy.get(0).size()-1));
                
                if(tiempoDeEsperaMinutos >= diferencia){
                    registroTF.setText("");
                    throw new NoTypeRequiredException("El tiempo desde tu ultima descarga no permite generar un nuevo registro");
                    
                }
            }
            
            
            query = "SELECT USUARIO.IDUSUARIO FROM USUARIO WHERE USUARIO.USERNAME = '"+Globales.currentUser+"'";
            columnas[0] = "IDUSUARIO";


            LinkedList<LinkedList<String>> idUsuario = Globales.bdTemp.select(query, columnas);
            if(idUsuario == null){
                throw new NoConectionDataBaseException("Error al conectar a la base de datos: " + Globales.bdTemp.getUltimoError());
            }

            query = "INSERT INTO VIAJE (IDUSUARIO,IDCAMION,FECHA,HORA,ESACTIVO) VALUES ("+idUsuario.get(0).get(0)+","+codigoDeBarrasInt+", GETDATE(), GETdATE(), 1)";

            boolean confirmacion = Globales.bdTemp.insert(query);
            if(confirmacion){
                registroTF.setText("");
                //pasar a la siguiente pantalla
                
                Globales.ultimoCamion = codigoDeBarrasInt.toString();
                RegistroDeViajeCompletado registro= new RegistroDeViajeCompletado();
                registro.setVisible(true);
                this.dispose();
            }
            else{
                throw new NoConectionDataBaseException("Error al conectar a la base de datos: " + Globales.bdTemp.getUltimoError());
            }
        }
        catch(NoConectionDataBaseException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error de conexión con la base de datos", JOptionPane.ERROR_MESSAGE);
            registroTF.setText("");
            registroTF.requestFocusInWindow();
        }
        catch(NoTypeRequiredException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error al guardar el registro", JOptionPane.WARNING_MESSAGE);
            registroTF.setText("");
            registroTF.requestFocusInWindow();
        }
    }//GEN-LAST:event_registroTFActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //no se revisa el estatus de la base de datos por que se quiere que siempre este
        //seleccionado el cuadro para introducir los codigos de barras
        //prueba
        JPasswordField pwd = new JPasswordField(32);
        int action = JOptionPane.showConfirmDialog(null, pwd,"Ingresa tu contraseña",JOptionPane.OK_CANCEL_OPTION);
        
       
        //termina prueba
        //primero se verifica la contraseña del usuario
       
        try{
            if(action < 0 || action>0){
                //se selecciono el boton cancelar
            }
            else{
                String[] columnas = {"CONTRASENA"};
                LinkedList<LinkedList<String>> resultado = Globales.bdTemp.select("select CONTRASENA FROM USUARIO WHERE USUARIO.USERNAME = '"+Globales.currentUser+"'", columnas);
                if(resultado==null){
                    throw new NoConectionDataBaseException("Error al conectar con la base de datos: "
                        + Globales.bdTemp.getUltimoError());
                }
                String textoEncriptadoConMD5=DigestUtils.md5Hex(new String(pwd.getPassword()));
                if(resultado.get(0).size() > 0){
                    if(!(resultado.get(0).get(0)).equals(textoEncriptadoConMD5)){
                        throw new NoTypeRequiredException("La contraseña es incorrecta, por favor corrígela");
                    }
                    
                    
                    //se cmbia de pantalla
                    GestionDePiedra piedra= new GestionDePiedra();
                    piedra.setVisible(true);
                    this.dispose();
                }
                else{
                    throw new NoTypeRequiredException("La contraseña es incorrecta, por favor corrígela");
                }
            }
            
            
        }
        catch(NoTypeRequiredException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error de formato", JOptionPane.ERROR_MESSAGE);
        }
        catch(NoConectionDataBaseException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error de conexión con la base de datos", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrarViajes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrarViajes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrarViajes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrarViajes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistrarViajes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField registroTF;
    // End of variables declaration//GEN-END:variables
}
