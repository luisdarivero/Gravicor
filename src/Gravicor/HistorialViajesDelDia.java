/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Gravicor;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Daniel
 */
public class HistorialViajesDelDia extends javax.swing.JFrame {
    private MyGregorianCalendar diaHistorial = new MyGregorianCalendar();
    private String minDate = "2-1-2018";
    private String maxDate = "1-1-2018";
    /**
     * Creates new form HistorialViajesDelDia
     */
    public HistorialViajesDelDia() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.setTitle("Historial de viajes");
        
        try{
            String queryFecha = "SELECT convert(varchar, getdate(), 105) as FECHA";
            String[] columnasFecha = {"FECHA"};
            LinkedList<LinkedList<String>> fecha = Globales.bdTemp.select(queryFecha, columnasFecha);
            if(fecha == null){
                throw new NoConectionDataBaseException("Error al conectar a la base de datos: " + Globales.bdTemp.getUltimoError());
            }
            if(fecha.size() <1 || fecha.get(0).size() < 1){
                throw new NoTypeRequiredException("No se pudo conectar con la base de datos, error inesperado");
            }
            
            String[] resultadoFecha = fecha.get(0).get(0).split("-");
            GregorianCalendar dia = new GregorianCalendar();
            diaHistorial.set(new Integer(resultadoFecha[2]),new Integer(resultadoFecha[1]) -1,new Integer(resultadoFecha[0]));
            calendario.setMaxSelectableDate(diaHistorial.getTime());
            calendario.setDate(diaHistorial.getTime());
            dia.set(2018,0,1);
            calendario.setMinSelectableDate(dia.getTime());
            
            actualizarPantalla(fecha.get(0).get(0));
            maxDate = getStringDate(diaHistorial.getTime());
           
            
        }
        catch(NoConectionDataBaseException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error de conexión con la base de datos", JOptionPane.ERROR_MESSAGE);
        }
        catch(NoTypeRequiredException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error al guardar el registro", JOptionPane.WARNING_MESSAGE);
        }
    }
    
    public void actualizarPantalla(String fecha) throws NoConectionDataBaseException, NoTypeRequiredException{
        String query = "SELECT CAMION.IDCAMION,TIPOCAMION.DESCRIPCION,TIPOCAMION.CAPACIDAD, COUNT(*) AS CONTEO, SUM(TIPOCAMION.TONELADAS) AS SUBTOTALTONELADAS\n" +
"FROM CAMION, VIAJE, TIPOCAMION\n" +
"WHERE CAMION.IDCAMION = VIAJE.IDCAMION and VIAJE.ESACTIVO = 1 AND CAMION.IDTIPOCAMION = TIPOCAMION.IDTIPOCAMION AND convert(varchar, VIAJE.FECHA, 105) = '"+fecha+"'\n" +
"GROUP BY VIAJE.IDCAMION, CAMION.IDCAMION, TIPOCAMION.DESCRIPCION, TIPOCAMION.CAPACIDAD";
            String[] columnas = {"IDCAMION","DESCRIPCION","CAPACIDAD","CONTEO", "SUBTOTALTONELADAS"};
            boolean validacion = Globales.bdTemp.insertarEnTabla(query, columnas, tabla);
            if(validacion == false){
                throw new NoConectionDataBaseException("Error al conectar a la base de datos: " + Globales.bdTemp.getUltimoError());
            }
            
            query = "SELECT SUM(TIPOCAMION.CAPACIDAD) AS TOTALMC, SUM(TIPOCAMION.TONELADAS) AS TOTALTONELADAS \n" +
"FROM VIAJE, CAMION, TIPOCAMION\n" +
"WHERE CAMION.IDCAMION = VIAJE.IDCAMION  AND convert(varchar, VIAJE.FECHA, 105) = '"+fecha+"' AND CAMION.IDTIPOCAMION = TIPOCAMION.IDTIPOCAMION and VIAJE.ESACTIVO = 1";
            
            String[] columnasTotales = {"TOTALMC", "TOTALTONELADAS"};
            
            LinkedList<LinkedList<String>> totales = Globales.bdTemp.select(query, columnasTotales);
            if(totales == null){
                throw new NoConectionDataBaseException("Error al conectar a la base de datos: " + Globales.bdTemp.getUltimoError());
            }
            if(totales.size()<1){
                throw new NoTypeRequiredException("No se pudo conectar con la base de datos, error inesperado");
            }
            
            totalMC.setText(totales.get(0).get(0));
            totalTon.setText(totales.get(1).get(0));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        totalMC = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        totalTon = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        calendario = new com.toedter.calendar.JDateChooser();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Número comercial", "Descripción", "Capacidad", "Conteo", "Subtotal toneladas"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tabla);

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 48)); // NOI18N
        jLabel1.setText("Historial del día");

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 36)); // NOI18N
        jLabel2.setText("Total M3:");

        jLabel3.setFont(new java.awt.Font("Calibri", 0, 36)); // NOI18N
        jLabel3.setText("Total Toneladas:");

        totalMC.setFont(new java.awt.Font("Calibri", 0, 36)); // NOI18N
        totalMC.setText("0");

        jLabel5.setFont(new java.awt.Font("Calibri", 0, 36)); // NOI18N

        totalTon.setFont(new java.awt.Font("Calibri", 0, 36)); // NOI18N
        totalTon.setText("0");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gravicor/Assets/realizarCorteDelDia1.png"))); // NOI18N
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Gravicor/Assets/realizarCorteDelDia2.png"))); // NOI18N

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gravicor/Assets/back-icon.png"))); // NOI18N
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        calendario.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gravicor/Assets/actualizar1.png"))); // NOI18N
        jButton3.setContentAreaFilled(false);
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Gravicor/Assets/actualizar2.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gravicor/Assets/editarViajesDeCamion1.png"))); // NOI18N
        jButton4.setContentAreaFilled(false);
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton4.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/Gravicor/Assets/editarViajesDeCamion2.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(1039, 1039, 1039)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(137, 137, 137)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(calendario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 722, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(130, 130, 130))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(totalMC))
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(totalTon))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(161, 161, 161))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(calendario, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 175, Short.MAX_VALUE)
                        .addComponent(jLabel5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(totalMC)
                            .addComponent(totalTon))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        GestionDePiedra piedra= new GestionDePiedra();
        piedra.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void limpiarTabla(){
        DefaultTableModel dtm = (DefaultTableModel)tabla.getModel(); 
        int numRows = dtm.getRowCount();
        //dtm.removeRow(0);
        dtm.setRowCount(0);
        String[] columnas = {"","","","",""};
        dtm.addRow(columnas);
    }
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        
        
        try{
            if(!validateDate(minDate,maxDate, getStringDate(calendario.getDate()))){
                throw new NoTypeRequiredException("La fecha seleccionada contiene un error, por favor corrigela");
            }
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            String fecha = sdf.format(calendario.getDate());
            String[] resultadoFecha = fecha.split("-");
            diaHistorial = new MyGregorianCalendar();
            diaHistorial.set(new Integer(resultadoFecha[2]),new Integer(resultadoFecha[1]) -1,new Integer(resultadoFecha[0]));
            //System.out.println(sdf.format(diaHistorial.getTime()));
            //diaHistorial.getTime()
            limpiarTabla();
            actualizarPantalla(fecha);
        }
        catch(NoConectionDataBaseException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error de conexión con la base de datos", JOptionPane.ERROR_MESSAGE);
        }
        catch(NoTypeRequiredException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error al guardar el registro", JOptionPane.WARNING_MESSAGE);
        }

        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
        
        //obtener el camion a editar
        try{
            String query = "SELECT CAMION.IDCAMION FROM CAMION where CAMION.ACTIVO = 1";
            String[] columnas = {"IDCAMION"};

            Object[][] listaCamiones = Globales.bdTemp.selectO(query, columnas);
            if(listaCamiones == null){
                throw new NoConectionDataBaseException("Error al conectarse con la base de datos: " + Globales.bdTemp.getUltimoError());
            }
            Object[] possiblesCamiones  = listaCamiones[0];

            String camion = "";
            try{
                    camion = (String)JOptionPane.showInputDialog(
                                this,
                                "Editar viajes de un camión:\n"
                                + "\"Selecciona el camión al que quieres editar sus viajes\"",
                                "Editar viajes de un camión",
                                JOptionPane.QUESTION_MESSAGE,
                                null,
                                possiblesCamiones,
                                possiblesCamiones[0]);

                }
                catch(Exception e){
                    throw new NoTypeRequiredException("No se pudo realizar la operación especificada");
                    
                }

            if (camion != null){
                SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                Globales.ultimaFecha = sdf.format(diaHistorial.getTime());
                Globales.ultimoCamion = camion;
                HistorialViajePorDiaCamion viajeCamion= new HistorialViajePorDiaCamion();
                viajeCamion.setVisible(true);
                this.dispose();
            }
        }
        catch(NoConectionDataBaseException e){
                JOptionPane.showMessageDialog(this, e.getMessage(), "Error de conexión con la base de datos", JOptionPane.ERROR_MESSAGE);
            }
        catch(NoTypeRequiredException e){
            JOptionPane.showMessageDialog(this, e.getMessage(), "Error al guardar el registro", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    
    private String getStringDate(Date date){
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        String fecha = "";
        try{
            fecha = sdf.format(date);
        }
        catch(Exception e){
            return null;
        }
        
        String[] resultadoFecha = fecha.split("-");
        if(resultadoFecha.length != 3){
            return null;
        }
        MyGregorianCalendar dia = new MyGregorianCalendar();
        dia.set(new Integer(resultadoFecha[2]),new Integer(resultadoFecha[1]) -1,new Integer(resultadoFecha[0]));
        
        return fecha;
    }
    
    private boolean validateDate(String fechaInicio, String fechaFinal, String fechaActual){
        if(fechaInicio == null || fechaFinal == null || fechaActual == null){
            
            return false;
        }
        String[] rInicio = fechaInicio.split("-");
        String[] rFinal = fechaFinal.split("-");
        String[] rActual = fechaActual.split("-");
        if(rInicio.length != 3 || rFinal.length != 3 || rActual.length != 3){
            
            return false;
        }
        
        if(Integer.parseInt(rActual[2]) < Integer.parseInt(rInicio[2]) || Integer.parseInt(rActual[2]) > Integer.parseInt(rFinal[2])){
            
            return false;
        }
        
        if(Integer.parseInt(rInicio[2]) == Integer.parseInt(rActual[2]) ){
            if(Integer.parseInt(rInicio[1]) > Integer.parseInt(rActual[1]) ){
                
                return false;
            }
            else if(Integer.parseInt(rInicio[1]) == Integer.parseInt(rActual[1])){
                if(Integer.parseInt(rInicio[0]) > Integer.parseInt(rActual[0])){
                    
                    return false;
                }
            }
        }
        
        if(Integer.parseInt(rFinal[2]) == Integer.parseInt(rActual[2]) ){
            if(Integer.parseInt(rFinal[1]) < Integer.parseInt(rActual[1]) ){
                
                return false;
            }
            else if(Integer.parseInt(rFinal[1]) == Integer.parseInt(rActual[1])){
                if(Integer.parseInt(rFinal[0]) < Integer.parseInt(rActual[0])){
                    return false;
                }
            }
        }
        
        return true;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HistorialViajesDelDia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HistorialViajesDelDia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HistorialViajesDelDia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HistorialViajesDelDia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HistorialViajesDelDia().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser calendario;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    private javax.swing.JLabel totalMC;
    private javax.swing.JLabel totalTon;
    // End of variables declaration//GEN-END:variables
}
